
---Basic stuff---
*Double check Classes's having functional capacity, days, times and location.  

*Make a registry of all the classes a student has to take and have taken
	
*Add majors to students
	
*User messaging each other - Inbox system

*Professors should be able to complete/finish their courses from their course page
	The completed class must show up in the sutdent's record.

*A better graph for the student schedule





---Crazy shit----

*Add a shopping card system (it must check for overlapping classes in schedule)
	When searching for classes it can be searched by majors	
	When searching for classes the students should have their schedule clearly visible

*Add prerequisites and co-requisites

*Forgot my password function.


*Add advisors?
*Dark mode?
*New project name?


---The canvas 2.0----

Classes must have Announcements, Assignments, Grades



--What we are working on--

*When you add an Assignment or announcement the professor must have like a time window of when the things appear and dissapear from student view.
*Make is so professors can also set time when making a new Assignemnt
	The system must give the professor a dropbox so set days. 

*Professor -> Manage Classes needs a complete rework.
*Give professors a list of their assignments and anncouncemts in their class
*Give professors the ability to hide and rewveal their assignments (with a checkbox)



--Bugs--

*Edit Course must send back to course list, it currently just stays in the same page
*Late assignments are not showing in the correct date.
Add a border to profile picture
The sidebar in dashboard


--Ernesto--
*top bar profiles and settings should be fixed on the top of the screen
*Make it look better
done*Make the assignments and annoucements be different depending on the class. 
calendar should recognize whether it is fall, spring or summer and from there it will show only the corresponding 4 months

shopping cart
classes should belong to fall, spring, summer


When adding a class the shopping cart could have a number on top of the icon showning how many classes it has
Log out icon turns into open door.
Calendar showing the date.

Commands
-----Create classes------

from datetime import date
from registration.models import Course

# Create 10 sample courses with start_date and end_date fields
Course.objects.bulk_create([
    Course(course_code='CEN4010', name='Software Engineering I', description='Introduction to Software Engineering', credits=3, capacity=30, available_seats=30, semester='fall', start_date=date(2024, 8, 20), end_date=date(2024, 12, 20)),
    Course(course_code='CEN4021', name='Software Engineering II', description='Advanced Software Engineering topics', credits=3, capacity=25, available_seats=25, semester='spring', start_date=date(2025, 1, 10), end_date=date(2025, 5, 10)),
    Course(course_code='COP3530', name='Data Structures and Algorithms', description='Study of data structures and algorithms', credits=4, capacity=40, available_seats=40, semester='fall', start_date=date(2024, 8, 20), end_date=date(2024, 12, 20)),
    Course(course_code='COP4600', name='Operating Systems', description='Introduction to operating systems concepts', credits=4, capacity=35, available_seats=35, semester='summer', start_date=date(2025, 5, 15), end_date=date(2025, 8, 15)),
    Course(course_code='CDA3103', name='Computer Architecture', description='Study of computer organization and architecture', credits=3, capacity=50, available_seats=50, semester='fall', start_date=date(2024, 8, 20), end_date=date(2024, 12, 20)),
    Course(course_code='CIS4910', name='Capstone Project', description='Capstone project for computer science students', credits=3, capacity=20, available_seats=20, semester='spring', start_date=date(2025, 1, 10), end_date=date(2025, 5, 10)),
    Course(course_code='COP4331', name='Object-Oriented Programming', description='Introduction to object-oriented programming concepts', credits=3, capacity=30, available_seats=30, semester='fall', start_date=date(2024, 8, 20), end_date=date(2024, 12, 20)),
    Course(course_code='COP4710', name='Database Management', description='Study of database design and management systems', credits=4, capacity=40, available_seats=40, semester='summer', start_date=date(2025, 5, 15), end_date=date(2025, 8, 15)),
    Course(course_code='CNT4713', name='Computer Networks', description='Introduction to computer networks and communication', credits=3, capacity=35, available_seats=35, semester='spring', start_date=date(2025, 1, 10), end_date=date(2025, 5, 10)),
    Course(course_code='CIS4930', name='Special Topics in Computing', description='Various topics in computing', credits=3, capacity=30, available_seats=30, semester='fall', start_date=date(2024, 8, 20), end_date=date(2024, 12, 20)),
])

print("10 sample courses created successfully!")


---------Create users---------

from django.contrib.auth.models import User
from registration.models import Student, Professor, Admin

# Common password for all users
password = 'defaultpassword123'

# Create Students
for i in range(1, 11):  # Creating 10 students
    username = f'student{i}'
    first_name = 'Student'
    last_name = str(i)
    email = f'student{i}@university.edu'
    id_number = f'STUD00{i}'

    # Create User instance
    user = User.objects.create_user(username=username, password=password, first_name=first_name, last_name=last_name, email=email)

    # Create Student instance
    Student.objects.create(user=user, id_number=id_number)

# Create Professors
for i in range(1, 6):  # Creating 5 professors
    username = f'professor{i}'
    first_name = 'Professor'
    last_name = str(i)
    email = f'professor{i}@university.edu'
    id_number = f'PROF00{i}'

    # Create User instance
    user = User.objects.create_user(username=username, password=password, first_name=first_name, last_name=last_name, email=email)

    # Create Professor instance
    Professor.objects.create(user=user, id_number=id_number)

# Create Admins
for i in range(1, 4):  # Creating 3 admins
    username = f'admin{i}'
    first_name = 'Admin'
    last_name = str(i)
    email = f'admin{i}@university.edu'
    id_number = f'ADMIN00{i}'

    # Create User instance
    user = User.objects.create_user(username=username, password=password, first_name=first_name, last_name=last_name, email=email)

    # Create Admin instance
    Admin.objects.create(user=user, id_number=id_number)

print("Sample users created successfully!")

